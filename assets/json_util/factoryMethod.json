{
  "title": "Factory Method",
  "subtitle": "",
  "image": "",
  "description": [
    {
      "descriptionName": "Definition",
      "imgUrl": "",
      "descriptionItems": [
        {
          "descTitle": "What is the Abstract Factory design pattern?",
          "descSubTitle": "<p><strong>Abstract Factory</strong> is a <strong>creational</strong> design pattern, also known as <strong>Kit</strong>. Its intention in the <a href=\"https://en.wikipedia.org/wiki/Design_Patterns\" target=\"_blank\" rel=\"noopener noreferrer\" style=\"color: darkblue;\">GoF book</a> is described as:</p><br> <blockquote><p><em>Provide an interface for creating families of related or dependent objects without specifying their concrete&nbsp;classes.</em></p></blockquote><br> <p>The main purpose of the Abstract Factory design pattern is to encapsulate creating a family of objects in a separate factory object, hence abstracting the process of object creation. For all supported families of objects, a common interface for creating a family of objects is defined, and then a concrete factory class is created to implement this interface.</p><br> <p>The Abstract Factory design pattern makes the creation of the objects more flexible:</p><br> <ul class=\"\"><li><em>Compile-time</em> flexibility - the way objects are created can be implemented and changed independently from clients by defining new (sub)classes;</li><li><em>Run-time</em> flexibility - a class can be configured with a factory object, which it uses to create objects, and even more, the factory object can be exchanged dynamically.</li></ul><br> <p>Finally, this pattern removes the direct binding of application-specific classes into the code. Correspondingly, the code only deals with interfaces of specific objects and their factories, but not with the specific implementations.</p>",
          "descImage": "https://kazlauskas.dev/assets/images/santa_factory-e03943a0d29d736f342fc2a938bff999.gif",
          "descCode": "",
          "descToCode": ""
        },
        {
          "descTitle": "Analysis",
          "descSubTitle": "<p>The general structure of the Abstract Factory design pattern looks like this:</p>",
          "descImage": "https://kazlauskas.dev/assets/images/abstract_factory-86dd9e0f80bd0a4616c4f9d56afba5f2.png",
          "descCode": "<ul class=\"\"><li><em>Abstract Factory</em> - declares an interface of operations that create abstract <em>Product</em> objects;</li><li><em>Concrete Factory</em> - implements the operations to create <em>Concrete Product</em> objects. <strong>Each <em>Concrete Factory</em> corresponds only to a single variant of products</strong>;</li><li><em>Product</em> - declares an interface for a type of <em>Product</em> object;</li><li><em>Concrete Product</em> - implements the <em>Product</em> interface and defines a product object to be created by the corresponding <em>Concrete Factory</em>;</li><li><em>Client</em> - uses only interfaces declared by the <em>Abstract Factory</em> and <em>Product</em> classes.</li></ul>",
          "descToCode": ""
        },
        {
          "descTitle": "Applicability",
          "descSubTitle": "<p>The usage of the Abstract Factory design pattern should be considered when a system's code needs to work with various families of related objects (products), but it should not depend on the concrete classes of those products, or on how they are created, composed and represented. The said design pattern provides an interface for the creation of objects from each class of the product family. By using this interface instead of concrete implementations of objects, the representation layer or the system's code, in general, should not worry about creating the wrong variant of a product that does not match other objects from the family. This restriction is helpful when you want to introduce platform-specific widgets/UI components to the representation layer and keep consistency across the whole system.</p>",
          "descImage": "",
          "descCode": "",
          "descToCode": ""
        }
      ]
    },
    {
      "descriptionName": "Code example",
      "imgUrl": "",
      "descriptionItems": [
        {
          "descTitle": "IWidgetsFactory",
          "descSubTitle": "<p>In Flutter, the Abstract Factory design pattern can be used to create families of related widgets or objects while abstracting the details of their creation. This can help make your code more maintainable and flexible by allowing you to switch between different implementations without changing the client code. Here's a short description of how to implement the Abstract Factory pattern in Flutter with a small code example.</p>",
          "descCode": "<div>\n  <code>\n    class MaterialWidgetsFactory implements IWidgetsFactory {\n    <br />&nbsp;&nbsp;const MaterialWidgetsFactory();\n    <br /><br />&nbsp;&nbsp;@override\n    <br />&nbsp;&nbsp;String getTitle() => 'Android widgets';\n    <br /><br />&nbsp;&nbsp;@override\n    <br />&nbsp;&nbsp;IActivityIndicator createActivityIndicator() =>\n    <br />&nbsp;&nbsp;const AndroidActivityIndicator();\n    <br /><br />&nbsp;&nbsp;@override\n    <br />&nbsp;&nbsp;ISlider createSlider() => const AndroidSlider();\n    <br /><br />&nbsp;&nbsp;@override\n    <br />&nbsp;&nbsp;ISwitch createSwitch() => const AndroidSwitch();\n    <br />}\n  </code>\n</div>",
          "descToCode": "<p>In this example, we have an abstract ButtonFactory interface with a createButton method. We then define two concrete factories, AndroidButtonFactory and IOSButtonFactory, each implementing the createButton method to create Android and iOS-style buttons, respectively.</p><br><p>The MyApp widget represents the client code that uses the abstract factory. You can choose which factory to use by passing it as a parameter when creating the MyApp widget. Depending on the factory you choose, it will create the corresponding button widget (ElevatedButton for Android or CupertinoButton for iOS). This allows you to switch between different button implementations without changing the client code.</p>"
        }
      ]
    },
    {
      "descriptionName": "Test",
      "imgUrl": "",
      "descriptionItems": [
        {
          "descTitle": "Test",
          "descSubTitle": "Test Test Test Test Test",
          "descCode": "lorem ipsum dole",
          "descToCode": ""
        }
      ]
    }
  ]
}